.TH PYCENSE 6 LOCAL

.SH NAME

pycense -- insert license notices into source code

.SH INTRODUCTION

pycense is a program for slipping copyright notices into source code.  It can be configured to insert any copyright into any number of files using any one of countless possible commenting styles.  It will also perform automatic substitution of specified fields with specified values within the text of a license.
 
.SH QUICK START

pycense comes preloaded with two copyright notices, mit_license and bsd_2_clause, and five different comment profiles: basic_scripting, c_style, lisp_style, html_style and haskell_style.  So let's say that you want to release some Python code under an MIT license.  Let's further assume that your name is Rev. L'il Delvin.  All you have to do is navegate to the directory containing the source files and run the following command:

	pycense --license mit_license --owner "Rev. L'il Delvin" --profile basic_scripting --apply_to *.py

In fact, you don't even need to specify a license from the command line as long as you have a default license selected.  Out of the box, this will be set to mit_license, which I like to use because it's short enough to read and simple enough to understand.

The following options do exactly what you'd expect:

.TP 
-h, --help

.TP 
-v, --version

.TP
-m, --manual

.SH OUTLINE

Every time pycense is invoked, at most one license and one profile can be loaded.  That one license, using that one profile, can be inserted into any number of source files.  The currently loaded profile can be a named profile that was created in the past, it can be an anonymous profile made up of settings fed to pycense via command line arguments or it can be a composition of the two, meaning that a named profile can be loaded and then any of the settings within it can be replaced by settings explicitly set from the command line.  The current profile can also be stored if you want: if it's based on a preexisting profile, you can store it in place, overwriting the previous settings for the selected profile, or you can save your profile under a new name.  Profiles can of course be renamed and deleted as well.

.P
You load the license and profile with the following options:

.TP
--license, -l LICENSE
.TP
--profile, -p PROFILE

.P
You can access pycense's basic functionality with the following options:

.TP
--apply_to FILE [FILE ...]
Insert the currently loaded license into all the files listed.  This operation is not reversible, so be careful.

.TP
--force_apply
With this flag set, pycense will apply the selected license to all the selected files even if no profile has been loaded, no default profile can be determined based on the suffixes of the selected files and no settings have been set.

.TP
--see SEEABLE [SEEABLE ...]
Request to be shown some setting or data.

.SH SEEABLES

.TP
defaults
.br
All the default values stored in the configuration file.  For an explanation of these values, see the section on defaults below.

.TP
licenses
.br
A list of all the imported licenses.

.TP
profiles
.br
A list of all the named profiles along with the individual settings for each one.

.TP
sample
.br
Format the currently loaded license using the currently loaded profile and dump it to the terminal.

.TP
all
.br
Display all of the SEEABLEs that were listed above, in the order they appeared.

.SH ADDITIONAL OPERATIONS
.P
You can also import, rename and edit licenses using pycense.  It's worth pointing out that all deletion, importation, renaming and editing operations are performed--in that order--before the load operations, so that if, for instance, you want to rename and load a license during one invocation of pycense, you have to refer to that license by its new name in the load request.  (Because any number of licenses can be modified during one invocation, you still need to explicitly identify the one you want to load.)
.P
Lastly, you can manage various defaults, including a default license, a default copyright owner, a default company, certain default settings for commenting profiles (tab, width and skip_line), default file extension associations and a default text editor, which pycense will use to open licenses for you when you want to edit them.  As with the rename and edit operations above, defaults will be set before they are used, so that you only ever work with the most current versions of your data.

.SH ONE EASTER EGG: AUTOMATIC PROFILE SELECTION

.P
It's possible to associate file name extensions (called "suffixes" below) with default profiles, so that pycense will intuit which commenting profile to apply to a given group of files.  There are some strict requirements on when pycense will try to do this, but these requirements are easily met under the vast majority of use cases:
.P
	1) All the files must have file extensions
.br
	2) All those file extensions must map onto the same profile
.br
	3) No settings can be explicitly set on the command line
.br
	4) force_apply has not been set
.br

.P
So if pycense is configured properly (and it is, right out of the box),
.P
	pycense --apply_to *.pl *.py
.P
is equivalent to
.P
	pycense --profile basic_scripting --license MIT_license --apply_to *.pl *.py

.SH BUILT IN PROFILES
Note: the profiles below are all shown with a width of 50 in order to display properly within this man page.  The actual profiles have a width of 79.
.P
##################################################
.br
# basic_scripting looks like this.               #
.br
#                                                #
.br
# It's suitable for use with Python, Perl, Ruby, #
.br
# PHP and similar languages as well Bash and     #
.br
# other *nix shells.                             #
.br
##################################################
.P
//================================================
.br
// c_style looks like this.                     //
.br
//                                              //
.br
// It's suitable for use with C/C++, Java and   //
.br
// other languages with C-style syntax.         //
.br
//================================================
.br
.P
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.br
;; lisp_style looks like this.                  ;;
.br
;;                                              ;;
.br
;; It's suitable for use with Lisp and          ;;
.br
;; languages based on Lisp such as Scheme.      ;;
.br
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.P
<!----------------------------------------------->
.br
<!--html_style looks like this.                -->
.br
<!--                                           -->
.br
<!--It's suitable for HTML and nothing else    -->
.br
<!--that I'm aware of.                         -->
.br
<!----------------------------------------------->
.P
--------------------------------------------------
.br
-- haskel_style looks like this.                --
.br
--                                              --
.br
-- It's suitable for Haskell, SQL and           --
.br
-- AppleScript.                                 --
.br
--------------------------------------------------


.SH CREATING AND MODIFYING COMMENTING PROFILES
.P
Comment profiles are defined using 13 variables, which can be set from the command line during each use or drawn from a named profile that had previously been stored.  You can also load a profile and temporarily reset any of its variables during the course of one invocation of pycense.  Here are the variables and the options used to set them:

.TP
--top_begin, -tb TOP_BEGIN
The string marking the beginning of the line along the top of the comment box.  Guaranteed to appear.
.TP
--top_end, -te TOP_END
The string marking the end of the line along the top of the comment box.  Guaranteed to appear.
.TP
--top_fill, -tf TOP_FILL
This string is repeated as necessary to fill the gap between top_begin and top_end.  It will only be printed if space remains, but it is guaranteed to fill all the space.
.TP
--top_rjust, -tl TOP_RJUST
If top_fill's length doesn't evenly divide the space between top_begin and top_end, the string that it produces will have to be trimmed.  top_rjust is a boolean value that tells pycense whether to trim from the front or the back (True or False, respectively).  False by default.
.TP
--left_wall, -lw LEFT_WALL
The left boundary of the area containing the copyright.  If you want a space between the visible part of the wall and the text, build it into the wall.
.TP
--right_wall, -rw RIGHT_WALL
The righthand compliment of the left wall.
.TP
--bottom_begin, -bb BOTTOM_BEGIN
Like top_begin.
.TP
--bottom_end, -be BOTTOM_END
Like top_end.
.TP
--bottom_fill, -bf BOTTOM_FILL
Like top_fill.
.TP
--bottom_rjust, -bl BOTTOM_RJUST
Like top_rjust.
.TP
--tab, -t TAB
Tabs in the license will be expanded into strings of spaces.  This value represents the distance between tab stops.  Paragraphs must be divided by newlines, though, so tabs should be avoided anyway.
.TP
--width, -w WIDTH
The maximum width of lines making up the comment box.  The value for width that is actually used will be subject to certain common sense restrictions, so it might be automatically adjusted.  But pycense will always make the smallest adjustment possible and revert to the last requested width if possible.  Only one value for width will be used in a given invocation.
.TP
--skip_line, -sl SKIP_LINE
The number of lines to skip before inserting the comment box.  Use this to jump over any magic numbers that are required to appear at the very beginning of the source, such as the shebang at the top of Perl and Python scripts.
.P
Once an anonymous profile has been created or a named profile has been loaded (and possibly modified), you have a few options for storing it:
.TP
--store_in_place, -sip
Use this if you have modified a named profile and want to overwrite the previous version of it.
.TP
--store_as, -sa NAME
Use this if you have an anonymous profile you want to save or a modified named profile you want to save under a new name.
.P And stored profiles can be modified using these options:
.TP
--rename_profile, -rp OLD NEW [OLD NEW ...]
Rename the profile called OLD as NEW.
.TP
--remove_profile, -rmp PROFILE [PROFILE ...]
Remove a profile from the configuration file.

.SH A WORD ABOUT WIDTH: ON BEING THE RIGHT SIZE
.P
Because comment boxes are designed to accomodate text, the text portion of the comment box must be at least one character wide.  Furthermore, the maximum line width must be long enough to include all of the guaranteed printable portions of the comment box (that is: top_begin plus top_end, bottom_begin plus bottom_end, and left_wall plus right_wall plus one character of text).
.P
If the width explicitly requested by the user is smaller than the minimum width required by the rest of the settings, the printed width will be automatically reset to the required minimum width.  If any other settings are changed to make the explicitly requested width possible, the printed width will be reset to the requested value.  But pycense will never change width once it's begun printing, so every line written to file during one session will be the same width.
.P
If there are any words that can't fit within the width of a line, they will be broken off so that they fill as much space as possible.  No hyphens will be inserted, so you'd be better off leaving ample space for longer words.

.SH A SAMPLE COMMENT FILE
.P
To clarify the meaning of the settings, I'm going to walk you through a novel comment profile and the command you'll run to create it.
.P
#CA$HMONEYCA$HMO#
.br
# Here is what :)
.br
# a comment    :)
.br
# using this   :)
.br
# profile will :)
.br
# look like.   :)
.br
#RE$MILLIONAIRE$#

.P
You'll want to give your profiles names that are evocative and easy to remember.  Let's call this one morning_rain.
.P
The settings are as follows:

	top_begin: "#"
.br
	top_fill: "CA$HMONEY"
.br
	top_end: "#"
.br
	top_rjust: False
.br
	left_wall: "# "
.br
	right_wall: " :)"
.br
	bottom_begin: "#"
.br
	bottom_fill: "MILLIONAIRE$"
.br
	bottom_rjust: True
.br
	width: 17
.P
Based on the sample above, it's not clear what skip_lines will be set to, but it's probably 1 based on the fact that the commenting mechanism is a pound sign, which suggests this profile will be used for commenting in a scripting languages, and scripting languages often require a shebang in the first line to let the shell know what interpreter to feed the program to.  Here's the command you'd run to create this profile:
.P
	pycense -tb '#' -tf 'CA$HMONEY' -te '#' -tl True -lw '# ' -rw ' :)' -bb '#' -bf 'MILLIONAIRE$' -be '#' -bl False -w 17 --store_as morning_rain
.P
This may seem like a lot to type, but think of all the time it will save you in the long run.  To save even more time, I've included this profile in the basic installation of pycense.  So try running the following command to see what it looks like:
.P
	pycense -p morning_rain --see sample
.P
This will cause your default license to be loaded, boxed up and dumped to the terminal screen for review.

.SH SPECIAL CHARACTERS
.P
Notice that the string values in the command above were all enclosed in single quotes.  It is necessary to enclose these values in quotes to protect any spaces they might contain.  And it is advisable to use single quotes as doing so prevents the shell from interpolating any special characters, such as '$', '!', ';' or '#'.
.P
There is one character so special that even single quotes can't protect it, however, and that's a dash at the beginning of the string.  (The reason single quotes can't protect these, by the way, is that they get their special meaning not from the shell but from Python's argument parsing engine, which makes certain assumptions about arguments beginning with dashes that don't hold true in this case.)
.P
So if you want some component of your comment box to begin with a nonzero number of dashes, you need to protect it with a percent sign (%).  And if you want some component to begin with any number of percent signs followed by any number of dashes, you also need to protect it with a single percent sign.  In both cases, pycense will remove exactly one percent sign and leave the rest of the string intact.
v.P
Percent signs and dashes anywhere else in a string will be ignored completely--even percent signs appearing at the beginning of the string, as long as they aren't followed immediately by a series of dashes.  
.P
To put it in terms of regular expressions,  one percent sign will be removed from any string beginning with one or more percent signes followed by one or more dashes: 's/^%(%*-+)/\\1/'.

.SH LICENSES
.P
You can either write a license yourself if you're some kind of genius or just find one online.  http://opensource.org/licenses is a good resource, with lots of open source licenses indexed by name and category.
.P
Once you've got your license copied down into a text file, you need to import that license into pycense's central repository.  Easy enough. Use this option:
.TP
--import_license FILE_NAME LICENSE_NAME [FILE_NAME LICENSE_NAME ...]
Import the file indicated by FILE_NAME and save it under the name LICENSE_NAME.  License names cannot include filepath separators (/).
.P
Now that the license is imported, if you want to make any changes to it, you can do so using the following options:
.TP
--rename_license, -rl OLD NEW [OLD NEW ...]
Rename the license with the name OLD as NEW.
.TP
--remove_license, -rml LICENSE [LICENSE ...]
Remove the named license from the pycense's library.
.TP
--edit_license, -el LICENSE [LICENSE ...]
Open up the named license using whatever editor has been designated using the --editor option or the default editor.
.TP
--editor, -e EDITOR
The editor to use this one time when editing the license.
.P
There are a few things to consider when editing your licenses.  First of all, paragraphs should not be indented and paragraph breaks should be indicated by a blank line.  Because text editors have a habit of slipping an extra newline in at the end of files, pycense will remove exactly one newline from the very end of the license if it finds one.  So if you want your license to end with a blank line, remember to pad it with a spare.
.P
Additionally, pycense is able to make substitutions within the currently loaded license, allowing you to automatically fill in certain fields.  (So the licenses as they are stored are really more like templates.)  Substitution fields within the license are strings enclosed by brokets, meaning that <they look like this>.  
.P
pycense will almost always try to perform three substitutions: year, owner and company.  All three of these have default values: year is drawn from the system clock, and default values for owner and company will be drawn from the configuration file.  If no default values have been set, blank strings will be used.  You can override the default values for all three of these using specific command line options: 
.TP
--year, -y YEAR
.TP
--owner, -o OWNER
.TP
--company, -c COMPANY
.P
Note that these are all handled as strings, so, for instance, owner could be a comma separated list of owners and pycense would be none the wiser.  Hint.
.P
These are the only substitutions common enough to warrant such special treatment, but you can perform almost any other substitution you can imagine on a case by case basis by invoking pycense with the following flag:
.TP
--substitute_value, -sv OLD NEW
Searches through the text for the broketed string <OLD> and replaces it with NEW.
.P
These irregular substitutions must be requested on the command line every time they are needed, as allowing general substitutions into the defaults file would open the user to pernicious and confusing bugs.  If you really want to make the same substitution every time, consider hardcoding the change into the license file itself.
.P
Any broketed strings that don't have a known substitution will be left untouched.  And if, for whatever reason, you want a literal broketed string containing one of the OLD values to appear in the output of pycense, you'll have to escape it with a backslash in front of the opening broket.  Standard escape rules apply, by the way, so that you can escape the backslash with another backslash, and in general, an odd number of backslashes will prevent the special interpretation of the brokets and the number of backslashes printed will be half that which appears in the original text.  
.P
Finally, you can disable substitutions altogether by adding the following flag:
.TP
--no_substitution, -ns
.P
There is one restriction on the substitution strings and that is fairly common sense but if you can't guess it off-hand you should probably be told: the OLD string cannot contain a closing broket, ">".  Due to the way pycense performs the string replacement (regular expressions), the first closing broket encountered is interpereted unambiguously as the end of the broketed string.
.P
So when you're installing and editing licenses, make sure that you are aware of these rules.  Licenses as they appear in the wild might not be ready to have these substitutions made cleanly.  For instance, instead of leaving a space for <owner> they might leave a space for <copyright holder>.  They might use braces, brackets or parentheses.  It wouldn't be practical to teach pycense all the different editing conventions that could possibly be used and some of them might even conflict with one another.  But fortunately it will be very easy for a human operator to make the necessary conversions.

.SH DEFAULTS
.P
You can manage the various defaults using the following command line options:
.TP
--default_license, -dl DEFAULT_LICENSE
The license that will be loaded unless a license is explicitly requested.
.TP
--default_company, -dc DEFAULT_COMPANY
This will be substituted for the string <company> anywhere it appears in the text of the license unless a different company is specified on the command line.
.TP
--default_owner, -do DEFAULT_OWNER
This will be sustituted for the string <owner> anywhere it appears in the text of the license unless a different owner is specified on the command line.
.TP
--default_tab, -dt DEFAULT_TAB
This is the default value for tab width that will be used if one is not explicitly specified either on the command line or in a loaded named profile.
.TP
--default_width, -dw DEFAULT_WIDTH
This is the default value for line width that will be used if one is not explicitly specified either on the command line or in a loaded named profile.
.TP
--default_skip_line, -dsl DEFAULT_SKIP_LINE
This is the default value for skip line that will be used if one is not explicitly specified either on the command line or in a loaded named profile.
.TP
--default_editor, -de EDITOR
This is the editor that pycense will use to open up imported licenses when you want to edit them.  As always, the correct answer is emacs.
.TP
--default_suffix, -ds SUFFIX PROFILE [SUFFIX PROFILE ...]
Associate SUFFIX with PROFILE so that if pycense is working on a file with that suffix, and no profile is explicitly chosen by the user, the default suffix will be applied to the file.  SUFFIX should not contain a period and cannot be an empty string.
.TP
--remove_suffix, -rms SUFFIX [SUFFIX]
Remove SUFFIX from the list of default suffixes.
